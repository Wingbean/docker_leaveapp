from flask import Flask, render_template, request, jsonify, redirect, session, url_for, flash, abort
from services.google_sheet_service import add_leave, get_all_leaves, get_leaves_by_month, delete_leave, get_leave_summary_by_month, get_leave_summary_by_person
import os
from dotenv import load_dotenv
from services.auth_service import create_user, authenticate_user
from services.data_service import save_leave_to_db
from models import db, User, Leave
import uuid
from flask_login import LoginManager, login_user, login_required, logout_user, current_user
from flask_migrate import Migrate
from services.telegram_service import send_telegram_message


app = Flask(__name__)
load_dotenv()

# --- Critical env checks ---
app.secret_key = os.getenv("SECRET_KEY")
if not app.secret_key:
    raise RuntimeError("SECRET_KEY is not set")

MYSQL_USER = os.getenv("MYSQL_USER")
MYSQL_PASSWORD = os.getenv("MYSQL_PASSWORD")
MYSQL_HOST = os.getenv("MYSQL_HOST")
MYSQL_DB = os.getenv("MYSQL_DB")
if not all([MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST, MYSQL_DB]):
    raise RuntimeError("Missing one of MYSQL_USER/MYSQL_PASSWORD/MYSQL_HOST/MYSQL_DB")

# --- DB config ---
# ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡∏£‡πÄ‡∏ß‡∏≠‡∏£‡πå mysqldb (mysqlclient) + charset ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î
app.config["SQLALCHEMY_DATABASE_URI"] = (
    f"mysql+mysqldb://{MYSQL_USER}:{MYSQL_PASSWORD}@{MYSQL_HOST}/{MYSQL_DB}"
    "?charset=utf8mb4"
)
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
#app.config["ENV"] = os.getenv("FLASK_ENV", "production")

# ‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≠ DB ‡∏ó‡∏ô ‡πÜ
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    "pool_pre_ping": True,
    "pool_recycle": 1800,
}

# ‡πÄ‡∏û‡∏¥‡πà‡∏° config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SMTP
app.config["EMAIL_FROM"] = os.getenv("EMAIL_FROM")
app.config["EMAIL_PASSWORD"] = os.getenv("EMAIL_PASSWORD")
app.config["BASE_URL"] = os.getenv("BASE_URL", "http://localhost:5001") # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô

# Cookie hardening (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á reverse proxy HTTPS ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î Secure)
app.config.setdefault("SESSION_COOKIE_SAMESITE", "Lax")
app.config.setdefault("SESSION_COOKIE_SECURE", True)        # ‡∏ï‡∏±‡πâ‡∏á True ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ HTTPS
app.config.setdefault("REMEMBER_COOKIE_SECURE", True)       # ‡∏ï‡∏±‡πâ‡∏á True ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ HTTPS

db.init_app(app)
migrate = Migrate(app, db) # <--- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

# Flask-Login setup
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà login ‡∏à‡∏∞ redirect ‡πÑ‡∏õ‡∏ó‡∏µ‡πà /login

# ‡∏ö‡∏≠‡∏Å Flask-Login ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î user ‡∏à‡∏≤‡∏Å id ‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏´‡∏ô
@login_manager.user_loader
def load_user(user_id):
    # ‡πÉ‡∏ä‡πâ API ‡∏™‡∏°‡∏±‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á SQLAlchemy 2.x
    try:
        return db.session.get(User, int(user_id))
    except Exception:
        return None

# ------------------------------
# Healthcheck (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô)
# ------------------------------
@app.get("/health")
def health():
    return "ok", 200


# ------------------------------
# Routes
# ------------------------------

# ‡∏´‡∏ô‡πâ‡∏≤ register
@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":  # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î submit form
        username = request.form["username"]  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å input
        email = request.form["email"]
        password = request.form["password"]

        if User.query.filter_by(username=username).first():  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ username ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            flash("Username already exists.")  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            return redirect("/register")  # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏î‡∏¥‡∏°
        if User.query.filter_by(email=email).first():
            flash("Email already registered.")
            return redirect("/register")

        create_user(username, email, password)
        flash("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")
        return redirect("/login")

    return render_template("register.html")  # GET -> ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô

@app.route("/verify/<token>")
def verify_email(token):
    user = User.query.filter_by(verify_token=token).first()
    if not user:
        flash("‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return redirect("/login")

    user.is_verified = True
    user.verify_token = None
    db.session.commit()
    flash("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    return redirect("/login")


# ‡∏´‡∏ô‡πâ‡∏≤ Login
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        user = authenticate_user(request.form["username"], request.form["password"])
        if user:
            login_user(user) # ‚úÖ ‡πÉ‡∏ä‡πâ login_user ‡πÅ‡∏ó‡∏ô session
            flash("Logged in successfully.")
            return redirect("/")
        return render_template("login.html", error="Invalid credentials")
    return render_template("login.html")

# ‡∏´‡∏ô‡πâ‡∏≤ Logout
@app.route("/logout")
@login_required
def logout():
    logout_user()   # ‚úÖ ‡πÉ‡∏ä‡πâ logout_user
    flash("You have been logged out.")
    return redirect("/login")

@app.route("/")
@login_required
def index():
    return render_template("index.html")

# ‡∏´‡∏ô‡πâ‡∏≤ forgot password
@app.route("/forgot", methods=["GET", "POST"])
def forgot_password():
    if request.method == "POST":
        username = request.form["username"]
        user = User.query.filter_by(username=username).first()

        if user:
            user.reset_token = str(uuid.uuid4()) # ‡∏™‡∏£‡πâ‡∏≤‡∏á UUID token ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
            db.session.commit()
            reset_url = f"{app.config['BASE_URL'].rstrip('/')}/reset/{user.reset_token}"  # ‡∏•‡∏¥‡∏á‡∏Å‡πå reset
            flash(f"Send this link to reset: {reset_url}")  # ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        else:
            flash("User not found.")

    return render_template("forgot_password.html")  # ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà username

# ‡∏´‡∏ô‡πâ‡∏≤ reset pasword
@app.route("/reset/<token>", methods=["GET", "POST"])
def reset_password(token):
    user = User.query.filter_by(reset_token=token).first()

    if not user:
        flash("Invalid or expired token.")
        return redirect("/login")

    if request.method == "POST":
        password = request.form["password"]
        user.set_password(password)  # ‡πÅ‡∏Æ‡∏ä‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        user.reset_token = None  # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        db.session.commit()
        flash("Password reset successful.")
        return redirect("/login")

    return render_template("reset_password.html", token=token)

# ‡∏´‡∏ô‡πâ‡∏≤ admin
@app.route("/admin")
@login_required
def admin():
    if not getattr(current_user, "is_admin", False):
        flash("Access denied.")
        return redirect("/")
    users = User.query.all()
    return render_template("admin.html", users=users)

@app.route("/admin/delete/<int:user_id>", methods=["POST"])  # ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ POST (TODo: ‡πÄ‡∏û‡∏¥‡πà‡∏° CSRF ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°)
@login_required
def delete_user(user_id):
    if not getattr(current_user, "is_admin", False):
        flash("Access denied.")
        return redirect("/")
    user = db.session.get(User, user_id) or abort(404)
    db.session.delete(user)
    db.session.commit()
    flash("User deleted.")
    return redirect("/admin")

# ‡∏•‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
@app.route("/delete_account", methods=["POST"])  # ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ POST (TODo: ‡πÄ‡∏û‡∏¥‡πà‡∏° CSRF ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°)
@login_required
def delete_account():
    db.session.delete(current_user)
    db.session.commit()
    flash("Account deleted.")
    return redirect("/login")

#--------------‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Form--------------------#

@app.route("/submit", methods=["POST"])
@login_required
def submit():
    data = request.form
    
    add_leave(
        
        data["name"],
        data["leave_type"],
        data["start_date"],
        data["end_date"],
        data.get("note", ""),
    )

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MySQL
    save_leave_to_db(
        data["name"],
        data["leave_type"],
        data["start_date"],
        data["end_date"],
        data.get("note", ""),
    )

    # ‚úÖ ‡∏™‡πà‡∏á Telegram Notification
    msg = (
        f"üì¢ <b>‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏≤</b>\n"
        f"üë§ <b>‡∏ä‡∏∑‡πà‡∏≠:</b> {data['name']}\n"
        f"üìù <b>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</b> {data['leave_type']}\n"
        f"üìÖ <b>‡∏ä‡πà‡∏ß‡∏á:</b> {data['start_date']} ‡∏ñ‡∏∂‡∏á {data['end_date']}\n"
        f"üóíÔ∏è <b>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</b> {data.get('note', '-')}"
    )
    send_telegram_message(msg)

    return jsonify({"status": "success"})

@app.route("/data")
@login_required
def data():
    return jsonify(get_all_leaves())

@app.route("/calendar")
@login_required
def calendar():
    month = request.args.get("month")  # format: YYYY-MM
    return jsonify(get_leaves_by_month(month))

@app.route("/delete", methods=["POST"])
@login_required
def delete():
    data = request.json or {}
    timestamp = data.get("timestamp")
    code = data.get("code")
    success = delete_leave(timestamp, code)
    return jsonify({"success": success})

#------Dashboard------#
@app.route("/dashboard")
@login_required
def dashboard():
    monthly_summary = get_leave_summary_by_month()
    person_summary = get_leave_summary_by_person()
    return render_template("dashboard.html",
                           monthly_summary=monthly_summary,
                           person_summary=person_summary)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5001, debug=True)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÄ‡∏õ‡πá‡∏ô 5001